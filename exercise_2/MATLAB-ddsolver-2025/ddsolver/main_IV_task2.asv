%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%     Solving 1D Poisson + Drift Diffusion semiconductor eqns using
%                    Gummel algorithm
%
%                 
%               
%
%     The code as is will calculate and plot a JV curve
%     as well as carrier densities, current densities, and electric field
%     distributions of a pn junction.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear all;
close all;

%%----- SETUP SIMULATION -----------------------------------------------------

% set temperature
T0       = 300;     % [K]

%secs1d_silicon_material_properties;
device.material = silicon_material_properties(T0);

% physical constants and parameters
secs1d_physical_constants;

device.doping.NA = 5E23; % [m^3]
device.doping.ND = 1E23; % [m^3]

% set device geometry
device.geometry.length         = 50e-6; % [m]
device.geometry.p_layer_length = 25e-6;  % [m]

% set device mesh

% uniform mesh
device.mesh.Nelements = 1000;
device.mesh.x = linspace (0, device.geometry.length, device.mesh.Nelements+1)';
% number of mesh cells
device.mesh.sinodes= [1:length(device.mesh.x)];
% position of junction
device.mesh.xm = device.geometry.p_layer_length; % device.geometry.length /2;

% set control parameters for simulation flow
% tolerances for convergence checks
itercontrol.tol = 1e-4;
itercontrol.maxit =  5000;
itercontrol.ptol = 1e-15;
itercontrol.pmaxit = 1000;

% if TRUE this parameter enable the use of previously calculate quantities as 
% initial guess for self-consistent solution of p,n, and psi
% if FALSE the thermal equilibrium is chosen as initial guess
% we will stay, for the time being with the thermal equilibrium as initial guess
itercontrol.prev_guess = false;
% set external voltage here!
voltage_step = 0.01;      %[V] 
voltage_start = -0.2;     %[V]
voltage_end = 1.0; %[V]

number_voltages = floor((voltage_end-voltage_start)/voltage_step)+1;

for acceptor_density = [5e23, 1e23, 1e22, 1e21, 1e20]
    
    device.doping.NA = acceptor_density
    % this array stores all voltages for which the currents will be calculated
    voltage_ramp = linspace(voltage_start,voltage_end, number_voltages);
    find_zero_voltage = find(voltage_ramp == 0);
    if (find_zero_voltage > 0)
        voltage_ramp(find(voltage_ramp == 0)) = voltage_step/4;
    end;

    current_ramp = zeros(1,length(voltage_ramp));

    % as the current might be very small for small voltages, it is useful to calculate
    % the current for large voltage first and proceed with decreasing voltages
    %    you are welcome to test, whether the simulated current changes if one loops 
    %    through voltages in increasing order

    for bias_voltage_num = length(voltage_ramp):-1:1

        % ask for tighter convergence for small voltages
        if (voltage_ramp(bias_voltage_num) < 0.2)
            itercontrol.tol = 1e-7;
        else
            itercontrol.tol = 1e-4;
        end;

        itercontrol.prev_guess = false;

        disp(['Calculate j at voltage V=',num2str(voltage_ramp(bias_voltage_num)),' V']);

        [current_ramp(bias_voltage_num), profile, it, res] = current4voltage(voltage_ramp(bias_voltage_num),T0,device,itercontrol);
    end

    figure(4)
    set(4,'Position', [1000 500 435 320]);
    %title({'Current Density vs Voltage @ T= ',num2str(T0),' K'}); 
    hold on;
    grid on
    plot(voltage_ramp, abs(current_ramp), 'LineWidth', 2)
    legend ('J_{tot}' );
    xlabel('Voltage  / V');
    ylabel('Current Density  / A{m^{-2}} '); 
    axis tight;
    hold off;

    figure(5)
    set(5,'Position', [500 500 435 320]);
    %title({'Current Density vs Voltage @ T= ',num2str(T0),' K'}); 
    hold on;
    grid on
    plot(voltage_ramp, abs(current_ramp),'LineWidth', 3);
    %scatter(voltage_ramp, abs(current_ramp));
    legend ('J_{tot}' );
    xlabel('Voltage  / V');
    ylabel('Current Density  / A{m^{-2}} '); 
    %this plots the current on a logarithmic scale
    set(gca,'yscale','log');
    hold off;
end

